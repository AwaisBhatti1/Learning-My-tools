import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Vasicek Model parameters
r0 = 0.05  # Initial short rate
alpha = 0.1  # Speed of reversion
b = 0.05  # Long-term mean rate
sigma = 0.01  # Volatility
T = 1.0  # Time horizon in years
dt = 1/252  # Time step in years (daily)
n_steps = int(T / dt)  # Number of time steps
n_simulations = 1000  # Number of simulations

# Generate random numbers for simulation
np.random.seed(42)
z = np.random.normal(size=(n_simulations, n_steps))

# Simulate interest rate paths
def simulate_vasicek(r0, alpha, b, sigma, T, dt, z):
    r = np.zeros_like(z)
    r[:, 0] = r0
    for t in range(1, z.shape[1]):
        dr = alpha * (b - r[:, t-1]) * dt + sigma * np.sqrt(dt) * z[:, t-1]
        r[:, t] = r[:, t-1] + dr
    return r

# Simulate interest rate paths
rates = simulate_vasicek(r0, alpha, b, sigma, T, dt, z)

# Plot some of the simulated paths
plt.figure(figsize=(10, 6))
for i in range(10):
    plt.plot(rates[i, :], lw=0.5)
plt.title('Simulated Short Rate Paths')
plt.xlabel('Time Steps')
plt.ylabel('Short Rate')
plt.grid(True)
plt.show()

# Calibrate the model using publicly available data on Treasuries
# For demonstration, we'll generate some synthetic Treasury yield data
# In practice, you would load actual market data here
maturities = np.array([0.25, 0.5, 1, 2, 3, 5, 7, 10, 20, 30])  # in years
synthetic_yields = np.array([0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065])

# Plot synthetic Treasury yield data
plt.figure(figsize=(10, 6))
plt.plot(maturities, synthetic_yields, 'o-', label='Synthetic Yields')
plt.title('Synthetic Treasury Yields')
plt.xlabel('Maturity (years)')
plt.ylabel('Yield')
plt.grid(True)
plt.legend()
plt.show()

# Calibration process
# In practice, you would fit the model parameters (alpha, b, sigma) to minimize the difference
# between the model-implied yields and the observed market yields
# Here, we'll skip the actual fitting process and use the pre-defined parameters

# Construct the interest rate tree
# Convert the simulated paths into an interest rate tree
tree = pd.DataFrame(rates).quantile([0.05, 0.25, 0.5, 0.75, 0.95]).T

# Plot the interest rate tree
plt.figure(figsize=(10, 6))
plt.plot(tree, lw=0.5)
plt.title('Interest Rate Tree')
plt.xlabel('Time Steps')
plt.ylabel('Short Rate')
plt.grid(True)
plt.legend(['5th percentile', '25th percentile', 'Median', '75th percentile', '95th percentile'])
plt.show()
